// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feature_extractor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "feature_extractor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace chrome_lang_id {

void protobuf_ShutdownFile_feature_5fextractor_2eproto() {
  delete Parameter::default_instance_;
  delete FeatureFunctionDescriptor::default_instance_;
  delete FeatureExtractorDescriptor::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_feature_5fextractor_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_feature_5fextractor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Parameter::default_instance_ = new Parameter();
  FeatureFunctionDescriptor::default_instance_ = new FeatureFunctionDescriptor();
  FeatureExtractorDescriptor::default_instance_ = new FeatureExtractorDescriptor();
  Parameter::default_instance_->InitAsDefaultInstance();
  FeatureFunctionDescriptor::default_instance_->InitAsDefaultInstance();
  FeatureExtractorDescriptor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_feature_5fextractor_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_feature_5fextractor_2eproto_once_);
void protobuf_AddDesc_feature_5fextractor_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_feature_5fextractor_2eproto_once_,
                 &protobuf_AddDesc_feature_5fextractor_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_feature_5fextractor_2eproto {
  StaticDescriptorInitializer_feature_5fextractor_2eproto() {
    protobuf_AddDesc_feature_5fextractor_2eproto();
  }
} static_descriptor_initializer_feature_5fextractor_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Parameter::kNameFieldNumber;
const int Parameter::kValueFieldNumber;
#endif  // !_MSC_VER

Parameter::Parameter()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_lang_id.Parameter)
}

void Parameter::InitAsDefaultInstance() {
}

Parameter::Parameter(const Parameter& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chrome_lang_id.Parameter)
}

void Parameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parameter::~Parameter() {
  // @@protoc_insertion_point(destructor:chrome_lang_id.Parameter)
  SharedDtor();
}

void Parameter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Parameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Parameter& Parameter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_feature_5fextractor_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_feature_5fextractor_2eproto();
#endif
  return *default_instance_;
}

Parameter* Parameter::default_instance_ = NULL;

Parameter* Parameter::New() const {
  return new Parameter;
}

void Parameter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:chrome_lang_id.Parameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_lang_id.Parameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_lang_id.Parameter)
  return false;
#undef DO_
}

void Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_lang_id.Parameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:chrome_lang_id.Parameter)
}

int Parameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parameter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Parameter*>(&from));
}

void Parameter::MergeFrom(const Parameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Parameter::CopyFrom(const Parameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter::IsInitialized() const {

  return true;
}

void Parameter::Swap(Parameter* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Parameter::GetTypeName() const {
  return "chrome_lang_id.Parameter";
}


// ===================================================================

#ifndef _MSC_VER
const int FeatureFunctionDescriptor::kTypeFieldNumber;
const int FeatureFunctionDescriptor::kNameFieldNumber;
const int FeatureFunctionDescriptor::kArgumentFieldNumber;
const int FeatureFunctionDescriptor::kParameterFieldNumber;
const int FeatureFunctionDescriptor::kFeatureFieldNumber;
#endif  // !_MSC_VER

FeatureFunctionDescriptor::FeatureFunctionDescriptor()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_lang_id.FeatureFunctionDescriptor)
}

void FeatureFunctionDescriptor::InitAsDefaultInstance() {
}

FeatureFunctionDescriptor::FeatureFunctionDescriptor(const FeatureFunctionDescriptor& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chrome_lang_id.FeatureFunctionDescriptor)
}

void FeatureFunctionDescriptor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  argument_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureFunctionDescriptor::~FeatureFunctionDescriptor() {
  // @@protoc_insertion_point(destructor:chrome_lang_id.FeatureFunctionDescriptor)
  SharedDtor();
}

void FeatureFunctionDescriptor::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FeatureFunctionDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FeatureFunctionDescriptor& FeatureFunctionDescriptor::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_feature_5fextractor_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_feature_5fextractor_2eproto();
#endif
  return *default_instance_;
}

FeatureFunctionDescriptor* FeatureFunctionDescriptor::default_instance_ = NULL;

FeatureFunctionDescriptor* FeatureFunctionDescriptor::New() const {
  return new FeatureFunctionDescriptor;
}

void FeatureFunctionDescriptor::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    argument_ = 0;
  }
  parameter_.Clear();
  feature_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FeatureFunctionDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:chrome_lang_id.FeatureFunctionDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_argument;
        break;
      }

      // optional int32 argument = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_argument:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &argument_)));
          set_has_argument();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_parameter;
        break;
      }

      // repeated .chrome_lang_id.Parameter parameter = 4;
      case 4: {
        if (tag == 34) {
         parse_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_parameter;
        if (input->ExpectTag(58)) goto parse_feature;
        break;
      }

      // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 7;
      case 7: {
        if (tag == 58) {
         parse_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_feature;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_lang_id.FeatureFunctionDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_lang_id.FeatureFunctionDescriptor)
  return false;
#undef DO_
}

void FeatureFunctionDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_lang_id.FeatureFunctionDescriptor)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 argument = 3 [default = 0];
  if (has_argument()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->argument(), output);
  }

  // repeated .chrome_lang_id.Parameter parameter = 4;
  for (int i = 0; i < this->parameter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->parameter(i), output);
  }

  // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 7;
  for (int i = 0; i < this->feature_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->feature(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:chrome_lang_id.FeatureFunctionDescriptor)
}

int FeatureFunctionDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 argument = 3 [default = 0];
    if (has_argument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->argument());
    }

  }
  // repeated .chrome_lang_id.Parameter parameter = 4;
  total_size += 1 * this->parameter_size();
  for (int i = 0; i < this->parameter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameter(i));
  }

  // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 7;
  total_size += 1 * this->feature_size();
  for (int i = 0; i < this->feature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->feature(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureFunctionDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FeatureFunctionDescriptor*>(&from));
}

void FeatureFunctionDescriptor::MergeFrom(const FeatureFunctionDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameter_.MergeFrom(from.parameter_);
  feature_.MergeFrom(from.feature_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_argument()) {
      set_argument(from.argument());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FeatureFunctionDescriptor::CopyFrom(const FeatureFunctionDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureFunctionDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->feature())) return false;
  return true;
}

void FeatureFunctionDescriptor::Swap(FeatureFunctionDescriptor* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(argument_, other->argument_);
    parameter_.Swap(&other->parameter_);
    feature_.Swap(&other->feature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FeatureFunctionDescriptor::GetTypeName() const {
  return "chrome_lang_id.FeatureFunctionDescriptor";
}


// ===================================================================

#ifndef _MSC_VER
const int FeatureExtractorDescriptor::kFeatureFieldNumber;
#endif  // !_MSC_VER

FeatureExtractorDescriptor::FeatureExtractorDescriptor()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_lang_id.FeatureExtractorDescriptor)
}

void FeatureExtractorDescriptor::InitAsDefaultInstance() {
}

FeatureExtractorDescriptor::FeatureExtractorDescriptor(const FeatureExtractorDescriptor& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chrome_lang_id.FeatureExtractorDescriptor)
}

void FeatureExtractorDescriptor::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureExtractorDescriptor::~FeatureExtractorDescriptor() {
  // @@protoc_insertion_point(destructor:chrome_lang_id.FeatureExtractorDescriptor)
  SharedDtor();
}

void FeatureExtractorDescriptor::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FeatureExtractorDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FeatureExtractorDescriptor& FeatureExtractorDescriptor::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_feature_5fextractor_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_feature_5fextractor_2eproto();
#endif
  return *default_instance_;
}

FeatureExtractorDescriptor* FeatureExtractorDescriptor::default_instance_ = NULL;

FeatureExtractorDescriptor* FeatureExtractorDescriptor::New() const {
  return new FeatureExtractorDescriptor;
}

void FeatureExtractorDescriptor::Clear() {
  feature_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FeatureExtractorDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:chrome_lang_id.FeatureExtractorDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 1;
      case 1: {
        if (tag == 10) {
         parse_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_feature;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_lang_id.FeatureExtractorDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_lang_id.FeatureExtractorDescriptor)
  return false;
#undef DO_
}

void FeatureExtractorDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_lang_id.FeatureExtractorDescriptor)
  // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 1;
  for (int i = 0; i < this->feature_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->feature(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:chrome_lang_id.FeatureExtractorDescriptor)
}

int FeatureExtractorDescriptor::ByteSize() const {
  int total_size = 0;

  // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 1;
  total_size += 1 * this->feature_size();
  for (int i = 0; i < this->feature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->feature(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureExtractorDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FeatureExtractorDescriptor*>(&from));
}

void FeatureExtractorDescriptor::MergeFrom(const FeatureExtractorDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  feature_.MergeFrom(from.feature_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FeatureExtractorDescriptor::CopyFrom(const FeatureExtractorDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureExtractorDescriptor::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->feature())) return false;
  return true;
}

void FeatureExtractorDescriptor::Swap(FeatureExtractorDescriptor* other) {
  if (other != this) {
    feature_.Swap(&other->feature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FeatureExtractorDescriptor::GetTypeName() const {
  return "chrome_lang_id.FeatureExtractorDescriptor";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_lang_id

// @@protoc_insertion_point(global_scope)
